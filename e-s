{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "71e06803",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['fkk', 1, 2, True] ['fkk', 1, 2, True]\n",
      "2855081631872\n",
      "2855081642176\n",
      "2855081322480\n",
      "2855081322480\n"
     ]
    }
   ],
   "source": [
    "list1 = [\"fkk\", 1, 2, True]\n",
    "list2 = list1[:]\n",
    "print(list2, list1)\n",
    "print(id(list1))\n",
    "print(id(list2))\n",
    "print(id(list1[0]))\n",
    "print(id(list2[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a9d00efd",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "for num in range(5):\n",
    "    if num == 3:\n",
    "        continue\n",
    "    print(num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5333ffd5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello Sahar\n",
      "How are you today Sahar ?\n"
     ]
    }
   ],
   "source": [
    "name = \"Sahar\"\n",
    "print(\"Hello {}\".format(name))\n",
    "print(f\"How are you today {name} ?\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5ecc123d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello John\n"
     ]
    }
   ],
   "source": [
    "name = 'John'\n",
    "print('Hello %s' % name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1b910f03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "H\n"
     ]
    },
    {
     "ename": "IndexError",
     "evalue": "string index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_16216\\4144177372.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mword\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"Hello\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m \u001b[0mword\u001b[0m\u001b[1;33m[\u001b[0m \u001b[1;36m0\u001b[0m \u001b[1;33m]\u001b[0m \u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m \u001b[0mword\u001b[0m\u001b[1;33m[\u001b[0m \u001b[1;36m5\u001b[0m \u001b[1;33m]\u001b[0m \u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m: string index out of range"
     ]
    }
   ],
   "source": [
    "word = \"Hello\"\n",
    "print( word[ 0 ] )\n",
    "print( word[ 5 ] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "13db3619",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello there.\n"
     ]
    }
   ],
   "source": [
    "word = \"Hello there!\"\n",
    "words = word.replace(\"!\", \".\")\n",
    "print(words)\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5df556b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Sahar \n"
     ]
    }
   ],
   "source": [
    "name = \"fkjfj Sahar fkjfj\"\n",
    "print(name.strip(\"fkjfj\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "509418f5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['hi', 'i', 'am', 'sahar', 'and', 'im', 'tired', '', '']\n"
     ]
    }
   ],
   "source": [
    "words = \"hi i am sahar and im tired  \"\n",
    "print(words.split(\" \"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e4bd5a71",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "x = 0\n",
    "print(bool(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6217b643",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a number: jsfdfij\n",
      "You did not enter a valid number!\n",
      "The program did not break! HAHAHAHAHAHA :) \n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    ans = float(input(\"enter a number: \"))\n",
    "    print(\"100 + {} = {}\".format(ans, 100+ans))\n",
    "except:\n",
    "    print(\"You did not enter a valid number!\")\n",
    "    print(\"The program did not break! HAHAHAHAHAHA :) \")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "390be2fb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a: [5, 10]\t b: [5, 10]\n",
      "Location a[0]: 2504014457264\t Location b[0]: 2504014457264\n",
      "a: [20, 10]\t b: [20, 10]\n"
     ]
    }
   ],
   "source": [
    "a = [5, 10]\n",
    "b = a\n",
    "print(\"a: {}\\t b: {}\".format(a, b))\n",
    "print(\"Location a[0]: {}\\t Location b[0]: {}\".format(id(a[0]), id(b[0])))\n",
    "a[0] = 20 # re-declaring the value of a[0] also changes b[0]\n",
    "print(\"a: {}\\t b: {}\".format(a, b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d513e543",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "value: 2\n",
      "value: 4\n",
      "value: 6\n",
      "value: 8\n"
     ]
    }
   ],
   "source": [
    "for num in range(2, 10, 2):\n",
    "    print(\"value: {}\".format(num))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a742f486",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "S\n",
      "a\n",
      "h\n",
      "a\n"
     ]
    }
   ],
   "source": [
    "name = \"Sahar\"\n",
    "for letter in name:\n",
    "    if letter == \"r\":\n",
    "        continue\n",
    "    print(letter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b3f5f5d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "red apple\n",
      "red banana\n",
      "red cherry\n",
      "big apple\n",
      "big banana\n",
      "big cherry\n",
      "tasty apple\n",
      "tasty banana\n",
      "tasty cherry\n"
     ]
    }
   ],
   "source": [
    "adj = [\"red\", \"big\", \"tasty\"]\n",
    "fruits = [\"apple\", \"banana\", \"cherry\"]\n",
    "\n",
    "for x in adj:\n",
    "  for y in fruits:\n",
    "    print(x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "91573c50",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 0\n",
      "0 1\n",
      "0 2\n",
      "1 0\n",
      "1 1\n",
      "1 2\n"
     ]
    }
   ],
   "source": [
    "for i in range(2):\n",
    "    for j in range(3):\n",
    "        print(i,j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "625d7537",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "i = 1\n",
    "while i < 6:\n",
    "    print(i)\n",
    "    i+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "aa02abd8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " \n",
      "k\n",
      "f\n",
      "j\n",
      "g\n",
      "l\n",
      "j\n",
      "f\n",
      "g\n",
      "g\n",
      " \n"
     ]
    }
   ],
   "source": [
    "name = \" kfjgljfgg \"\n",
    "for letter in name:\n",
    "    print(letter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "aae1fc54",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "4\n"
     ]
    }
   ],
   "source": [
    " for num in range (5):\n",
    "        if num == 3:\n",
    "            continue\n",
    "        print(num)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7aa6e11a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "i = 1\n",
    "while i < 6:\n",
    "    print(i)\n",
    "    if i==3:\n",
    "        break\n",
    "    i+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d95620c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "5\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "i = 1\n",
    "while i < 6:\n",
    "    i+=1\n",
    "    if i == 3:\n",
    "        continue\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f600c4ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "i is no longer than 6\n"
     ]
    }
   ],
   "source": [
    "i=1\n",
    "while i<6:\n",
    "    i+=1\n",
    "    print(i)\n",
    "else:\n",
    "    print(\"i is no longer than 6\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ad0bcb2b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter something .. krf\n",
      "Enter something .. gke\n",
      "Enter something .. lj\n",
      "Enter something .. quit\n"
     ]
    }
   ],
   "source": [
    "while input(\"Enter something .. \") != \"quit\": \n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c7abe7c9",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'number' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_9484\\722550333.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mgame_over\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mnumber\u001b[0m \u001b[1;33m<\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[1;32mwhile\u001b[0m \u001b[0mnumber\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mnums\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mnums\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'number' is not defined"
     ]
    }
   ],
   "source": [
    "game_over = False\n",
    "number < 3\n",
    "while number > 0:   \n",
    "    for nums in range(5):\n",
    "        if nums == 3:\n",
    "            print(game_over = True)\n",
    "            break\n",
    "    number -= 1\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "481e0ce4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "game_over = False\n",
    "while game_over == False:\n",
    "    for i in range(5):\n",
    "        if i==3:\n",
    "            game_over = True\n",
    "            break\n",
    "        else:\n",
    "            print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "16d15160",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19\n",
      "[4, 6, 8, 1]\n",
      "[4, 6]\n",
      "[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 3, 4, 3, 2, 1, 4, 6, 555]\n",
      "[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 999, 2, 3, 3, 4, 3, 2, 1, 4, 6, 555]\n",
      "[1, 2, 3, 4, 5, 7, 8, 9, 1, 999, 2, 3, 3, 4, 3, 2, 1, 4, 6, 555]\n",
      "[1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 6, 7, 8, 9, 555, 999]\n",
      "[1, 2, 3, 4, 5, 7, 8, 9, 1, 2, 3, 3, 4, 3, 2, 1, 4, 6, 555]\n"
     ]
    }
   ],
   "source": [
    "# working with list\n",
    "list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 3, 4, 3, 2, 1, 4, 6]\n",
    "print(len(list))\n",
    "print(list[3:10:2])\n",
    "print(list[-2:])\n",
    "list.append(555)\n",
    "print(list)\n",
    "list.insert(10, 999)\n",
    "print(list)\n",
    "list.pop(5)\n",
    "print(list)\n",
    "# try:\n",
    "#     list.remove(999)\n",
    "#     print(list)\n",
    "# exc9lisept:\n",
    "#     print(\"that item does not exist\")\n",
    "sorted_list=sorted(list)\n",
    "print(sorted_list)\n",
    "while 999 in list:\n",
    "    list.remove(999)\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "70f28c5c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n",
      "I'm Sahar Yadegari\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'mushroom' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_15476\\3088527098.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     13\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mPizza_Topping\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     14\u001b[0m     \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mf\"pizza ingredients: {mushroom}, {bacon}\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 15\u001b[1;33m \u001b[0mPizza_Topping\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     16\u001b[0m \u001b[0mPizza_Topping\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     17\u001b[0m \u001b[0mPizza_Topping\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_15476\\3088527098.py\u001b[0m in \u001b[0;36mPizza_Topping\u001b[1;34m()\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     13\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mPizza_Topping\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 14\u001b[1;33m     \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mf\"pizza ingredients: {mushroom}, {bacon}\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     15\u001b[0m \u001b[0mPizza_Topping\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     16\u001b[0m \u001b[0mPizza_Topping\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'mushroom' is not defined"
     ]
    }
   ],
   "source": [
    "def Calc():\n",
    "    x, y = 5, 10\n",
    "    print(x+y)\n",
    "Calc()\n",
    "\n",
    "\n",
    "def my_name():\n",
    "    print(\"I'm Sahar Yadegari\")\n",
    "my_name()\n",
    "\n",
    "\n",
    "\n",
    "def Pizza_Topping():\n",
    "    print(\"pizza ingredients: {}, {}, {}\".format(tomato, mushroom, bacon)) #.format is a function and cannot use in another function\n",
    "Pizza_Topping()\n",
    "Pizza_Topping()\n",
    "Pizza_Topping()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "507710c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'tuple'>\n",
      "5\n",
      "True\n",
      "Jess\n"
     ]
    }
   ],
   "source": [
    "def outputData(name, *args):\n",
    "     print( type(args) )\n",
    "     for arg in args:\n",
    "            print(arg)\n",
    "outputData(\"John Smith\", 5, True, \"Jess\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "27d1c7f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'dict'>\n",
      "Saha\n",
      "23\n",
      "CAD\n"
     ]
    }
   ],
   "source": [
    "def outi(**kwargs):\n",
    "    print(type(kwargs))\n",
    "    \n",
    "    print(kwargs[\"name\"])\n",
    "    print(kwargs[\"age\"])\n",
    "    print(kwargs[\"goal\"])\n",
    "    \n",
    "#     for kw in kwargs:\n",
    "#         print(kw)\n",
    "outi(name= \"Saha\", age=\"23\", goal=\"CAD\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "86d0eb49",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a word plz: Hi\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "word = input(\"Enter a word plz: \")\n",
    "\n",
    "def upper_letter(word2):\n",
    "    if word[0] == word2[0].upper():\n",
    "        print(True)\n",
    "    else:\n",
    "        print(False)\n",
    "upper_letter(word)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "45e920fb",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1580512670.py, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"C:\\Users\\sahar\\AppData\\Local\\Temp\\ipykernel_1384\\1580512670.py\"\u001b[1;36m, line \u001b[1;32m5\u001b[0m\n\u001b[1;33m    if kwargs == []\u001b[0m\n\u001b[1;37m                   ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "first = input(\"Enter your first name if you mind: \")\n",
    "last = input(\"Enter your last name if you mind: \")\n",
    "\n",
    "def info(**kwargs):\n",
    "    if kwargs == []\n",
    "    print(\"No name passes in.\")\n",
    "#         print(\"Your first name and last name is: {} {}\".format(first_name, last_name))\n",
    "    else: \n",
    "        print(kwarg[\"first\"])\n",
    "        print(kwarg[\"last\"])\n",
    "        \n",
    "#         print(\"Your first name and last name is: {} {}\".format(first_name, last_name))\n",
    "#         print(\"No name passes in.\")\n",
    "info(first, last)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "048fe84f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n"
     ]
    }
   ],
   "source": [
    "def addnums(num1, num2):\n",
    "    result = num1+ num2\n",
    "#     return result\n",
    "    addnumbers = result\n",
    "    print(result)\n",
    "\n",
    "addnums(5, 6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "960f2993",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Sth i\n",
      "i\n"
     ]
    }
   ],
   "source": [
    "def info():\n",
    "    return input(\"Enter Sth \")\n",
    "# info()\n",
    "user_input = info()\n",
    "print(user_input)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "c9e1ce40",
   "metadata": {},
   "outputs": [
    {
     "ename": "UnboundLocalError",
     "evalue": "local variable 'number' referenced before assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mUnboundLocalError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_1384\\408996731.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mscopeTest\u001b[0m\u001b[1;33m(\u001b[0m \u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m      \u001b[0mnumber\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[1;36m1\u001b[0m \u001b[1;31m# not accessible due to function level scope\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m \u001b[0mscopeTest\u001b[0m\u001b[1;33m(\u001b[0m \u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_1384\\408996731.py\u001b[0m in \u001b[0;36mscopeTest\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mnumber\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m5\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mscopeTest\u001b[0m\u001b[1;33m(\u001b[0m \u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m      \u001b[0mnumber\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[1;36m1\u001b[0m \u001b[1;31m# not accessible due to function level scope\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[0mscopeTest\u001b[0m\u001b[1;33m(\u001b[0m \u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mUnboundLocalError\u001b[0m: local variable 'number' referenced before assignment"
     ]
    }
   ],
   "source": [
    "number = 5\n",
    "def scopeTest( ):\n",
    "     number += 1 # not accessible due to function level scope\n",
    "scopeTest( )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "35874ec1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "function\n"
     ]
    }
   ],
   "source": [
    "def scopeTest( ):\n",
    "     word = \"function\"\n",
    "     return word\n",
    "value = scopeTest( )\n",
    "print(value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "a3e9d05c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    }
   ],
   "source": [
    " num = 5\n",
    "def changeNum(n):\n",
    "    n += 5\n",
    "print(num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "053039aa",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = 5\n",
    "\n",
    "def addx(y):\n",
    "     return x + y\n",
    "\n",
    "\n",
    "addx(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "f2e0e020",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x is 10\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "def setx(y):\n",
    "     x = y\n",
    "     print('x is %d' % x)\n",
    "\n",
    "\n",
    "\n",
    "setx(10)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "5b54b2d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x is 10\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "def setx(y):\n",
    "     global x\n",
    "     x = y\n",
    "     print('x is %d' % x)\n",
    "\n",
    "\n",
    "\n",
    "setx(10)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ad1a24f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After Altering: ['soccer', 'football', 'hockey', 'basketball']\n"
     ]
    }
   ],
   "source": [
    "sports = [ \"baseball\", \"football\", \"hockey\", \"basketball\" ]\n",
    "def change(aList):\n",
    "    aList[ 0 ] = \"soccer\"\n",
    "# print(\"Before Altering: { }\".format(sports) )\n",
    "change(sports)\n",
    "print( \"After Altering: {}\".format(sports) )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8e304c31",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Bill', 'Rich', 'Amanda']\n"
     ]
    }
   ],
   "source": [
    "names = ['Bob', 'Rich', 'Amanda']\n",
    "\n",
    "def changeValue(aList, name, index):\n",
    "    aList[0] = \"Bill\"\n",
    "changeValue(names, \"Bill\", 0)\n",
    "print(names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c0dcc5c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "John\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "person = {\"name\": \"John\"}\n",
    "print( person.get(\"name\") ) # retrieves value of name key as before\n",
    "print( person.get(\"age\", \"Age is not available.\") ) # get is a secure \n",
    "# way to retrieve information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "91c6f9f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "basketball\n"
     ]
    }
   ],
   "source": [
    "data = {\"sports\": [\"basketball\", \"volyball\", \"swimming\", \"football\"]}\n",
    "print(data[\"sports\"][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e3d686ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "baseball\n"
     ]
    }
   ],
   "source": [
    "data = { \"sports\": [ \"baseball\", \"football\", \"hockey\", \"soccer\" ] }\n",
    "print( data[\"sports\"][0] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "32c40de2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'sports': ['baseball', 'football', 'hockey', 'soccer']}\n"
     ]
    }
   ],
   "source": [
    "sports = [ \"baseball\", \"football\", \"hockey\", \"soccer\" ]\n",
    "# sports_dict = dict(sports) \n",
    "sports_dict = dict({\"sports\" : sports})\n",
    "print(sports_dict)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
